import TelegramBot from "node-telegram-bot-api";
import { Client } from "@gradio/client";

import { TelegramToken } from "./config.js";
import { textData, buttonData, errorData } from "./watcher.js";

const bot = new TelegramBot(TelegramToken, { polling: true });
const FedotID = 870204479;
const DavidID = 923690530;

let usersData = [];

let introText = `–î–æ–±—Äo –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–æ–∫</b>. –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç–µ.\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n<blockquote>/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/reset - —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n/support - –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n/about - –æ –±–æ—Ç–µ</blockquote>`;

let aboutText = `<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–æ–∫?</b>\n<blockquote><b>–ë–æ—Ç</b>, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π <b>digfusion</b> —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <b>Hugging Face API</b>.</blockquote>\n\n<b>–ú–æ–¥–µ–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:</b>\n<blockquote><b>‚Ä¢ OpenGPT 4o</b> - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n<b>‚Ä¢ OpenGPT 4o</b> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n<b>‚Ä¢ Instant Video</b> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ</blockquote>\n\n<b>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:</b>\n<blockquote><b>–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ digfusion - –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å.</b>\n\n–ú—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ –∏ –Ω–µ –ª–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.</blockquote>`;

let supportText = `<b><i>üí≠ –ü–æ–¥–¥–µ—Ä–∂–∫–∞</i></b>\n\n–ü–µ—Ä–µ–¥ –¥–∏–∞–ª–æ–≥–æ–º, <b>–ø–æ–∂–∞–ª—É–π—Å—Ç–∞,</b> –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <b>—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –Ω–∞–º–∏!\n\n<a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A2%D1%80%D0%B5%D0%B1%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-%D0%B4%D0%B8%D0%B0%D0%BB%D0%BE%D0%B3%D0%B5">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è digfusion –≤ –¥–∏–∞–ª–æ–≥–µ</a></b>\n<i>–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ digfusion!</i>\n\n–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: <b>–î–∞–≤–∏–¥ üßë‚Äçüíª</b>\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å <b>10:00</b> –ø–æ <b>21:00, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</b>`;

bot.setMyCommands([
  { command: "/start", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫" },
  { command: "/reset", description: "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" },
  { command: "/text", description: "–¢–µ–∫—Å—Ç" },
  { command: "/image", description: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" },
  { command: "/video", description: "–í–∏–¥–µ–æ" },
  { command: "/support", description: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ " },
  { command: "/about", description: "–û –±–æ—Ç–µ" },
]);

async function intro(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot
      .sendMessage(chatId, `${introText}`, {
        parse_mode: `HTML`,
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [[]],
        },
      })
      .then((message) => {
        dataAboutUser.userAction = `response`;
      });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function support(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.sendMessage(chatId, `${supportText}`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠",
              url: "https://t.me/digfusionsupport",
            },
          ],
        ],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function about(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.sendMessage(chatId, `${aboutText}`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function resetTextChat(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot
      .sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—Å–∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚úÖ`, {
        parse_mode: `HTML`,
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [[]],
        },
      })
      .then((message) => {
        dataAboutUser.userAction = `response`;
      });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function getResponse(chatId, userPrompt) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.sendChatAction(chatId, "typing");

  try {
    const space = await Client.connect("KingNish/OpenGPT-4o");
    const result = await space.predict("/chat", {
      user_prompt: userPrompt,
    });

    console.log(result);
    bot.sendChatAction(chatId, "typing");

    await bot.sendMessage(chatId, `${result}`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function getImage(chatId, userPrompt) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.sendChatAction(chatId, "upload_photo");

  try {
    const space = await Client.connect("KingNish/Image-Gen-Pro");
    const result = await space.predict("/image_gen_pro", {
      instruction: userPrompt,
      input_image: null,
    });

    bot.sendChatAction(chatId, "upload_photo");

    await bot.sendPhoto(chatId, result.data[1].url);
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function getVideo(chatId, userPrompt) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.sendChatAction(chatId, "record_video");

  try {
    const space = await Client.connect("KingNish/Instant-Video");
    const result = await space.predict("/instant_video", {
      prompt: userPrompt,
    });

    bot.sendChatAction(chatId, "upload_video");

    await bot.sendVideo(chatId, result.data[0].video.url);
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function changeMode(chatId, mode) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (mode) {
      case `response`:
        await bot
          .sendMessage(chatId, `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ‚úÖ`, {
            parse_mode: `HTML`,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[]],
            },
          })
          .then((message) => {
            dataAboutUser.userAction = `response`;
          });
        break;
      case `image`:
        await bot
          .sendMessage(chatId, `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚úÖ`, {
            parse_mode: `HTML`,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[]],
            },
          })
          .then((message) => {
            dataAboutUser.userAction = `image`;
          });
        break;
      case `video`:
        await bot
          .sendMessage(chatId, `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ‚úÖ`, {
            parse_mode: `HTML`,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[]],
            },
          })
          .then((message) => {
            dataAboutUser.userAction = `video`;
          });
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function StartAll() {
  bot.on(`message`, async (message) => {
    if (FedotID == message.chat.id || DavidID == message.chat.id) {
      let text = message.text;
      let chatId = message.chat.id;
      let userMessage = message.message_id;

      try {
        if (!usersData.find((obj) => obj.chatId == chatId)) {
          usersData.push({ chatId: chatId, login: message.from.first_name, userAction: `response` });
        }

        const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

        switch (text) {
          case `/start`:
            intro(chatId);
            break;
          case `/text`:
            changeMode(chatId, `response`);
            break;
          case `/image`:
            changeMode(chatId, `image`);
            break;
          case `/video`:
            changeMode(chatId, `video`);
            break;
          case `/reset`:
            resetTextChat(chatId);
            break;
          case `/support`:
            support(chatId);
            break;
          case `/about`:
            about(chatId);
            break;
        }
        if (Array.from(text)[0] != "/") {
          switch (dataAboutUser.userAction) {
            case `response`:
              getResponse(chatId, text);
              break;
            case `image`:
              getImage(chatId, text);
              break;
            case `video`:
              getVideo(chatId, text);
              break;
          }
        }

        textData(chatId, dataAboutUser.login, text);
      } catch (error) {
        errorData(chatId, dataAboutUser.login, `${String(error)}`);
      }
    }
  });
}

StartAll();
