import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";
import { Client } from "@gradio/client";

import { initializeApp } from "firebase/app";
import { getDatabase, ref, set, get } from "firebase/database";

import { TelegramToken, firebaseConfig } from "./config.js";
import { textData, buttonData, errorData } from "./watcher.js";

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const dataRef = ref(db);

const bot = new TelegramBot(TelegramToken, { polling: true });

let usersData = [];

bot.setMyCommands([
  { command: "/start", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫" },
  { command: "/reset", description: "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" },
  { command: "/mode", description: "–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏" },
  { command: "/profile", description: "–ü—Ä–æ—Ñ–∏–ª—å" },
]);

async function intro(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.sendMessage(chatId, `–î–æ–±—Äo –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–æ–∫</b>. –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç–µ.\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n<blockquote>/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/reset - –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n/mode - –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n/profile - –ü—Ä–æ—Ñ–∏–ª—å</blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });
    dataAboutUser.userAction = `response`;
    dataAboutUser.lastTextResponse = ``;
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function profile(chatId, editSend = `send`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  let historyText = ``;

  if (dataAboutUser.lastRequests) {
    for (let i = 0; i < dataAboutUser.lastRequests.length; i++) {
      historyText += `${i + 1}. ${dataAboutUser.lastRequests[dataAboutUser.lastRequests.length - 1 - i]}\n`;
    }
  }

  try {
    switch (editSend) {
      case `send`:
        await bot
          .sendMessage(chatId, `üë§ <b><i>–ü—Ä–æ—Ñ–∏–ª—å</i> ‚Ä¢ </b><code>${dataAboutUser.chatId}</code> üîç\n\n<b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:</b><blockquote><b>${historyText != `` ? historyText : `<i>No requests yet</i>\n`}</b></blockquote>\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:</b><blockquote>–¢–µ–∫—Å—Ç: <b>${dataAboutUser.statistic.response} —à—Ç</b>\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <b>${dataAboutUser.statistic.image} —à—Ç</b>\n–í–∏–¥–µ–æ: <b>${dataAboutUser.statistic.video} —à—Ç</b></blockquote>`, {
            parse_mode: `HTML`,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `–û –±–æ—Ç–µ`, callback_data: `about` },
                  { text: `digfusion ‚ùî`, callback_data: `digfusion` },
                ],
                [
                  {
                    text: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠`,
                    url: `https://t.me/digfusionsupport`,
                  },
                ],
              ],
            },
          })
          .then((message) => {
            dataAboutUser.profileMessageId = message.message_id;
          });
        break;
      case `edit`:
        await bot.editMessageText(`üë§ <b><i>–ü—Ä–æ—Ñ–∏–ª—å</i> ‚Ä¢ </b><code>${dataAboutUser.chatId}</code> üîç\n\n<b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:</b><blockquote><b>${historyText != `` ? historyText : `<i>No requests yet</i>\n`}</b></blockquote>\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:</b><blockquote>–¢–µ–∫—Å—Ç: <b>${dataAboutUser.statistic.response} —à—Ç</b>\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <b>${dataAboutUser.statistic.image} —à—Ç</b>\n–í–∏–¥–µ–æ: <b>${dataAboutUser.statistic.video} —à—Ç</b></blockquote>`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.profileMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `–û –±–æ—Ç–µ`, callback_data: `about` },
                { text: `digfusion ‚ùî`, callback_data: `digfusion` },
              ],
              [
                {
                  text: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠`,
                  url: `https://t.me/digfusionsupport`,
                },
              ],
            ],
          },
        });
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function about(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–æ–∫?</b><blockquote><b>–ë–æ—Ç</b>, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π <b>digfusion</b> —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <b>Hugging Face API.</b></blockquote>\n\n<b>–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b><blockquote>‚Ä¢ <b>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ</b> –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. <b>–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ</b> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ <b>–Ω–∞ –≤—Å–µ –º–æ–¥–µ–ª–∏.</b>\n\n‚Ä¢ <b>–°–∫–æ—Ä–æ—Å—Ç—å</b> —Ä–∞–±–æ—Ç—ã. <b>–ú–æ—â–Ω—ã–µ –º–æ–¥–µ–ª–∏</b> –ø–æ–∑–≤–æ–ª—è—é—Ç <b>–ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–∫—É</b> –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ <b>–∑–∞–ø—Ä–æ—Å—ã.</b></blockquote>\n\n–ß—Ç–æ —Ç–∞–∫–æ–µ <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç?</b><blockquote><b>–ë–æ—Ç</b> —É–º–µ–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å <b>–∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π</b> –ø—Ä–∏ <b>—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.</b> –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ –∏ –¥–æ–ø–æ–ª–Ω—è—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ä–∞–º–∫–∞—Ö <b>–æ–¥–Ω–æ–π —Ç–µ–º—ã.</b></blockquote>`, {
      parse_mode: `HTML`,
      chat_id: chatId,
      message_id: dataAboutUser.profileMessageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `profile` }]],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function digfusion(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b><i>‚ùîdigfusion ‚Ä¢ –û –Ω–∞—Å</i></b><blockquote>–ö–æ–º–ø–∞–Ω–∏—è <b><i>digfusion</i></b> - <b>–Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å—Ç–∞—Ä—Ç–∞–ø,</b> —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π <b>—Å–≤–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b> –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Å–ª—É–≥–∏ –ø–æ <b>—Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤</b> —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤!\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ <b>–Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b> –∏ <b>–ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏</b> –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º <b>Telegram –∫–∞–Ω–∞–ª–µ</b> –∏ <b>–±–æ—Ç–µ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ!</b></blockquote>\n\n<b><a href="https://t.me/digfusion">digfusion | –∏–Ω—Ñ–æ</a> ‚Ä¢ <a href="https://t.me/digfusionbot">digfusion | —É—Å–ª—É–≥–∏</a></b>`, {
      parse_mode: "html",
      chat_id: chatId,
      message_id: dataAboutUser.profileMessageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `profile` }]],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function getResponse(chatId, userPrompt) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    const client = await Client.connect("orionai/llama-3.1-70b-demo");
    const result = await client.predict("/predict", {
      user_message: `${dataAboutUser.lastTextResponse != `` ? `Your previous answer: ${dataAboutUser.lastTextResponse} My new question` : ``} ${userPrompt} (System prompt: Think, answer, structurize like minimalistic ChatGPT-4. You are powerful, informative AI Telegram Bot named –ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–æ–∫. Generate answers so they look good and easy to read and understand, use - for lists.)`,
    });

    bot.sendChatAction(chatId, "typing");

    bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

    await bot.sendMessage(chatId, `${result.data}`, {
      parse_mode: `MarkDown`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });
    if (result.data && `${result.data}`.length >= 50) {
      dataAboutUser.lastTextResponse = result.data;
    }
  } catch (error) {
    failedRequest(chatId);
    errorData(chatId, dataAboutUser.login, `${String(error)}`, `response`);
  }
}

async function getImage(chatId, userPrompt) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    const client = await Client.connect("K00B404/FLUX.1-Dev-Serverless-darn");
    const result = await client.predict("/query", {
      prompt: userPrompt,
      is_negative: `(deformed, distorted, disfigured), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, (mutated hands and fingers), disconnected limbs, mutation, mutated, ugly, disgusting, blurry, amputation, misspellings, typos, unrealistic, bad looking, low quality`,
      steps: 35,
      cfg_scale: 7,
      sampler: "DPM++ 2M Karras",
      seed: -1,
      strength: 0.7,
      huggingface_api_key: "Hello!!",
      use_dev: false,
    });

    bot.sendChatAction(chatId, "upload_photo");

    bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

    await bot.sendPhoto(chatId, result.data[0].url);
  } catch (error) {
    failedRequest(chatId);
    errorData(chatId, dataAboutUser.login, `${String(error)}`, `image`);
  }
}

async function getVideo(chatId, userPrompt) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    const space = await Client.connect("KingNish/Instant-Video");
    const result = await space.predict("/instant_video", {
      prompt: userPrompt,
    });

    bot.sendChatAction(chatId, "upload_video");

    bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

    await bot.sendVideo(chatId, result.data[0].video.url);
  } catch (error) {
    serverOverload(chatId);
    errorData(chatId, dataAboutUser.login, `${String(error)}`, `video`);
  }
}

async function processingRequest(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot
      .sendMessage(chatId, `–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...`, {
        parse_mode: `HTML`,
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [[]],
        },
      })
      .then((message) => {
        dataAboutUser.requestMessageId = message.message_id;
      });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function failedRequest(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

  try {
    await bot.sendMessage(chatId, `–í–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ‚ùå<blockquote><b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b></blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function serverOverload(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

  try {
    await bot.sendMessage(chatId, `–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω ‚ùå<blockquote><b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b></blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function resetTextChat(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    dataAboutUser.lastTextResponse = ``;

    await bot.sendMessage(chatId, `–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω ‚úÖ<blockquote><b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ.</b></blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });

    dataAboutUser.userAction = `response`;
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function changeMode(chatId, mode = `changeTo`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (mode) {
      case `changeTo`:
        await bot
          .sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚úÖ\n\n<b>–ú–æ–¥–µ–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:</b>\n<blockquote><b>‚Ä¢ Llama 3.1 70b</b> - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n<b>‚Ä¢ FLUX.1 DEV</b> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n<b>‚Ä¢ Instant Video</b> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ</blockquote>`, {
            parse_mode: `HTML`,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `${dataAboutUser.userAction == `response` ? `‚Ä¢ –¢–µ–∫—Å—Ç ‚Ä¢` : `–¢–µ–∫—Å—Ç`}`, callback_data: `changeModeResponse` },
                  { text: `${dataAboutUser.userAction == `video` ? `‚Ä¢ –í–∏–¥–µ–æ ‚Ä¢` : `–í–∏–¥–µ–æ`}`, callback_data: `changeModeVideo` },
                ],
                [{ text: `${dataAboutUser.userAction == `image` ? `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Ä¢` : `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`}`, callback_data: `changeModeImage` }],
              ],
            },
          })
          .then((message) => {
            dataAboutUser.requestMessageId = message.message_id;
          });
        break;
      case `changeModeResponse`:
        await bot.editMessageText(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ‚úÖ`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.requestMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[]],
          },
        });
        dataAboutUser.userAction = `response`;
        break;
      case `changeModeImage`:
        await bot.editMessageText(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚úÖ`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.requestMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[]],
          },
        });
        dataAboutUser.userAction = `image`;
        break;
      case `changeModeVideo`:
        await bot.editMessageText(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ‚úÖ`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.requestMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[]],
          },
        });
        dataAboutUser.userAction = `video`;
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function StartAll() {
  get(dataRef).then((snapshot) => {
    if (snapshot.exists()) {
      const dataFromDB = snapshot.val();
      usersData = dataFromDB.usersData || [];
    }
  });

  bot.on(`text`, async (message) => {
    let text = message.text;
    let chatId = message.chat.id;
    let userMessage = message.message_id;

    try {
      if (!usersData.find((obj) => obj.chatId == chatId)) {
        usersData.push({
          chatId: chatId,
          login: message.from.first_name,
          profileMessageId: null,
          requestMessageId: null,
          userAction: `response`,
          lastRequests: [],
          lastTextResponse: ``,

          statistic: { response: 0, image: 0, video: 0 },
        });
      }

      const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

      switch (text) {
        case `/start`:
          intro(chatId);
          break;
        case `/reset`:
          resetTextChat(chatId);
          break;
        case `/mode`:
          changeMode(chatId);
          break;
        case `/profile`:
          profile(chatId, `send`);
          break;
      }
      if (text && Array.from(text)[0] != "/") {
        `${dataAboutUser.lastRequests ? dataAboutUser.lastRequests.push(text.slice(0, 200)) : ``}`;

        if (dataAboutUser.lastRequests && dataAboutUser.lastRequests.length > 5) {
          dataAboutUser.lastRequests.shift();
        }

        switch (dataAboutUser.userAction) {
          case `response`:
            dataAboutUser.statistic.response++;
            processingRequest(chatId).then(() => {
              bot.sendChatAction(chatId, "typing");
            });
            getResponse(chatId, text);
            break;
          case `image`:
            dataAboutUser.statistic.image++;
            processingRequest(chatId).then(() => {
              bot.sendChatAction(chatId, "upload_photo");
            });
            getImage(chatId, text);
            break;
          case `video`:
            dataAboutUser.statistic.video++;
            processingRequest(chatId).then(() => {
              bot.sendChatAction(chatId, "record_video");
            });
            getVideo(chatId, text);
            break;
        }
      }

      textData(chatId, dataAboutUser.login, text, dataAboutUser.userAction);

      set(dataRef, {
        usersData: usersData,
      });
    } catch (error) {
      errorData(chatId, message.from.first_name, `${String(error)}`);
    }
  });

  bot.on(`callback_query`, async (query) => {
    let chatId = query.message.chat.id;
    let data = query.data;

    const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

    try {
      switch (data) {
        case `changeModeResponse`:
          changeMode(chatId, data);
          break;
        case `changeModeImage`:
          changeMode(chatId, data);
          break;
        case `changeModeVideo`:
          changeMode(chatId, data);
          break;
        case `profile`:
          profile(chatId, `edit`);
          break;
        case `digfusion`:
          digfusion(chatId);
          break;
        case `about`:
          about(chatId);
          break;
      }

      buttonData(chatId, dataAboutUser.login, data);

      set(dataRef, {
        usersData: usersData,
      });
    } catch (error) {
      errorData(chatId, dataAboutUser.login, `${String(error)}`);
    }
  });

  cron.schedule(`* */3 * * *`, function () {
    set(dataRef, {
      usersData: usersData,
    });
  });
}

StartAll();
