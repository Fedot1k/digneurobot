import TelegramBot from "node-telegram-bot-api"; // Telegram, Time, HuggingFace API, File Managing
import cron from "node-cron";
import { Client } from "@gradio/client";
import fs from "fs";

import { config } from "./config.js"; // Digneurobot Token
import { textData, buttonData, errorData, databaseBackup } from "./watcher.js"; // Surround Watcher (debugging)

const bot = new TelegramBot(config.Tokens[0], { polling: true }); // bot setup
const FedotID = 870204479; // developer ID

let usersData = [];

// bot menu commands
bot.setMyCommands([
  { command: "/start", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫" },
  { command: "/reset", description: "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" },
  { command: "/profile", description: "–ü—Ä–æ—Ñ–∏–ª—å" },
]);

// start message
async function intro(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.sendMessage(chatId, `–î–æ–±—Äo –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–æ–∫</b>. –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç–µ.\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n<blockquote>/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/reset - –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n/profile - –ü—Ä–æ—Ñ–∏–ª—å</blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
    });

    dataAboutUser.textContext = [];
    dataAboutUser.userAction = "regular";
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

// profile message
async function profile(chatId, sectionType = `profile`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (sectionType) {
      case `send`:
        await bot.sendMessage(chatId, "„Ö§").then((message) => {
          dataAboutUser.profileMessageId = message.message_id;
          profile(chatId);
        });
        break;
      case `profile`:
        await bot.editMessageText(`üë§ <b><i>–ü—Ä–æ—Ñ–∏–ª—å</i> ‚Ä¢ </b><code>${dataAboutUser.chatId}</code> üîç\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ –¥–ª—è –ù–µ–π—Ä–æ—Å–µ—Ç–∏:</b><blockquote>${dataAboutUser.userInfoText ? `${dataAboutUser.userInfoText.slice(0, 200)}${dataAboutUser.userInfoText.length > 200 ? `..` : ``}\n\n<a href="https://t.me/digneurobot/?start=userInfo"><b>–ò–∑–º–µ–Ω–∏—Ç—å..</b></a>` : `<a href="https://t.me/digneurobot/?start=userInfo"><b>–î–æ–±–∞–≤–∏—Ç—å..</b></a>`}</blockquote>\n\n<b>–ö–∞–∫–æ–π –æ—Ç–≤–µ—Ç –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å:</b><blockquote>${dataAboutUser.answerTypeText ? `${dataAboutUser.answerTypeText.slice(0, 200)}${dataAboutUser.answerTypeText.length > 200 ? `..` : ``}\n\n<a href="https://t.me/digneurobot/?start=answerType"><b>–ò–∑–º–µ–Ω–∏—Ç—å..</b></a>` : `<a href="https://t.me/digneurobot/?start=answerType"><b>–î–æ–±–∞–≤–∏—Ç—å..</b></a>`}</blockquote>`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.profileMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [{ text: `${chatId == FedotID ? `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üî•` : ``}`, callback_data: `adminStart` }],
              [
                { text: `‚ùï –û –±–æ—Ç–µ`, callback_data: `about` },
                { text: `digfusion ‚ùî`, callback_data: `digfusion` },
              ],
              [
                {
                  text: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠`,
                  url: `https://t.me/digsupport`,
                },
              ],
            ],
          },
        });
        break;
      case `userInfo`:
        await bot.editMessageText(`üë§ <b><i>–ü—Ä–æ—Ñ–∏–ª—å</i> ‚Ä¢ –û —Å–µ–±–µ üîç</b>\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ù–µ–π—Ä–æ—Å–µ—Ç–∏:</b>${dataAboutUser.userInfoText ? `<blockquote><code>${dataAboutUser.userInfoText}</code></blockquote>\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å..</i>` : `<blockquote><i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å..</i></blockquote>`}`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.profileMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `profile` },
                { text: `${dataAboutUser.userInfoText ? `–°–±—Ä–æ—Å–∏—Ç—å ‚ôªÔ∏è` : ``}`, callback_data: `userInfoDelete` },
              ],
            ],
          },
        });
        break;
      case `answerType`:
        await bot.editMessageText(`üë§ <b><i>–ü—Ä–æ—Ñ–∏–ª—å</i> ‚Ä¢ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ üîç</b>\n\n<b>–ö–∞–∫–æ–π –æ—Ç–≤–µ—Ç –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å:</b>${dataAboutUser.answerTypeText ? `<blockquote><code>${dataAboutUser.answerTypeText}</code></blockquote>\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å..</i>` : `<blockquote><i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å..</i></blockquote>`}`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.profileMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `profile` },
                { text: `${dataAboutUser.answerTypeText ? `–°–±—Ä–æ—Å–∏—Ç—å ‚ôªÔ∏è` : ``}`, callback_data: `answerTypeDelete` },
              ],
            ],
          },
        });
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

// about bot message
async function about(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–æ–∫?</b><blockquote><b>–ë–æ—Ç</b>, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π <b>digfusion</b> —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <b>Hugging Face API.</b></blockquote>\n\n<b>–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b><blockquote><b>‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã</b>\n–ú–æ—â–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–ø–æ—Å–æ–±–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å <b>–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é.</b>\n\n<b>‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b>\n–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ <b>–±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.</b>\n\n<b>‚Ä¢ –ê–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>\n–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º <b>–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏</b> –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥.</blockquote>\n\n–ß—Ç–æ —Ç–∞–∫–æ–µ <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç?</b><blockquote><b>–ë–æ—Ç</b> —É–º–µ–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å <b>–∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π</b> –ø—Ä–∏ <b>—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.</b> –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ –∏ –¥–æ–ø–æ–ª–Ω—è—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ä–∞–º–∫–∞—Ö <b>–æ–¥–Ω–æ–π —Ç–µ–º—ã.</b></blockquote>`, {
      parse_mode: `HTML`,
      chat_id: chatId,
      message_id: dataAboutUser.profileMessageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `profile` }]],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

// digfusion info message
async function digfusion(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b><i>‚ùîdigfusion ‚Ä¢ –û –Ω–∞—Å</i></b>\n<blockquote>–ö–æ–º–ø–∞–Ω–∏—è <b><i>digfusion</i></b> - <b>–Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å—Ç–∞—Ä—Ç–∞–ø,</b> —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π <b>—Å–≤–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b> –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Å–ª—É–≥–∏ –ø–æ <b>—Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤</b> —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤!\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ <b>–Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b> –∏ <b>–ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏</b> –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º <b>Telegram –∫–∞–Ω–∞–ª–µ</b> –∏ <b>–±–æ—Ç–µ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ!</b>\n\n<i>–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ <b>digfusion</b> —Å –¥—É—à–æ–π ü§ç</i></blockquote>\n\n<b><a href="https://t.me/digfusion">digfusion | –∏–Ω—Ñ–æ</a> ‚Ä¢ <a href="https://t.me/digfusionbot">digfusion | —É—Å–ª—É–≥–∏</a></b>`, {
      parse_mode: "HTML",
      chat_id: chatId,
      message_id: dataAboutUser.profileMessageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `profile` }]],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

// progressive text message output
async function showResponseText(chatId, progressOutput, userMessage) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.sendChatAction(chatId, "typing");

  let outputSpeed = 200;
  `${progressOutput.length > 500 ? outputSpeed == 1500 : ``}`;

  // showing text by sliced chunks
  try {
    for (let i = 0; i < progressOutput.length; i += 3800) {
      let chunkMessage = progressOutput.slice(i, i + 3800);
      let changingText = chunkMessage[0];

      await bot
        .sendMessage(chatId, `${changingText} ‚ö™Ô∏è`, {
          disable_web_page_preview: true,
          reply_to_message_id: `${i == 0 ? userMessage : null}`,
        })
        .then((message) => {
          dataAboutUser.responseMessageId = message.message_id;
        });

      // editing text message with symbols
      for (let i = 1; i < chunkMessage.length; i += outputSpeed) {
        changingText += `${chunkMessage.slice(i, i + outputSpeed).join("")}`;

        await bot.editMessageText(`${changingText} ‚ö™Ô∏è`, {
          chat_id: chatId,
          message_id: dataAboutUser.responseMessageId,
          disable_web_page_preview: true,
        });

        await new Promise((resolve) => setTimeout(resolve, 50));
      }

      // finishing and formatting text message output
      await bot.editMessageText(changingText, {
        parse_mode: `Markdown`,
        chat_id: chatId,
        message_id: dataAboutUser.responseMessageId,
        disable_web_page_preview: true,
      });
    }

    bot.sendChatAction(chatId, "cancel");
  } catch (error) {
    failedRequest(chatId);
    errorData(chatId, dataAboutUser.login, `${String(error)}`, `response`);
  }
}

// text request processing
async function getResponse(chatId, userPrompt, userMessage) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  // requesting text generation from HuggingFace API
  try {
    const client = await Client.connect("Qwen/Qwen2.5");
    const result = await client.predict("/model_chat_1", {
      query: `${dataAboutUser.textContext ? `Our chat history: ${dataAboutUser.textContext}\n\nMy new request: ` : ``}${userPrompt}`,
      history: [],
      system: `You are '–ù–µ–π—Ä–æ' from Russia, created by digfusion. You are a very minimalistic and helpful AI Telegram assistant. Your model is 'Digneuro 2.0'. You generate text, images and videos. All your answers are very original. Avoid errors on parse_mode Markdown. If User Instructions will lead to error in Telegram (parse_mode Markdown), notify the user. Check facts before answering.
      
      User Instructions:
      User info: ${dataAboutUser.userInfoText ? `${dataAboutUser.userInfoText}` : `none`}
      Answer type: ${dataAboutUser.answerTypeText ? `${dataAboutUser.answerTypeText}` : `none`}`,
      radio: `72B`,
    });

    bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

    // preparing text for progressive output (symbols and speed)
    let progressOutput = result.data[1][0][1].text
      .replace(/\\frac\{([^}]+)\}\{([^}]+)\}/g, "($1) / ($2)")
      .replace(/\\sqrt\{([^}]+)\}/g, "sqrt($1)")
      .replace(/\\cdot/g, "*")
      .replace(/\\text\{([^}]+)\}/g, "$1")
      .replace(/\^(\{([^}]+)\}|[a-zA-Z0-9])/g, "^($2)")
      .replace(/_(\{([^}]+)\}|[a-zA-Z0-9])/g, "_($2)")
      .replace(/\\quad/g, " ")
      .replace(/\\implies/g, " => ")
      .replace(/\\rightarrow/g, " -> ")
      .replace(/\\leftarrow/g, " <- ")
      .replace(/\\geq/g, " >= ")
      .replace(/\\leq/g, " <= ")
      .replace(/\\neq/g, " != ")
      .replace(/\\approx/g, " ‚âà ")
      .replace(/\\pi/g, "œÄ")
      .replace(/\\infty/g, "‚àû")
      .replace(/\\sum/g, "sum")
      .replace(/\\int/g, "‚à´")
      .replace(/\\lim/g, "lim")
      .replace(/\\sin/g, "sin")
      .replace(/\\cos/g, "cos")
      .replace(/\\tan/g, "tan")
      .replace(/\\log/g, "log")
      .replace(/\\ln/g, "ln")
      .replace(/\\exp\{([^}]+)\}/g, "exp($1)")
      .replace(/\\overline\{([^}]+)\}/g, "($1)")
      .replace(/\\underline\{([^}]+)\}/g, "($1)")
      .replace(/\\binom\{([^}]+)\}\{([^}]+)\}/g, "($1 choose $2)")
      .replace(/\\/g, "")
      .split("");

    // saving chat history to context
    if (result.data[1][0][1].text && dataAboutUser.textContext) {
      dataAboutUser.textContext.push(userPrompt);
      dataAboutUser.textContext.push(result.data[1][0][1].text);
    }

    if (dataAboutUser.textContext && dataAboutUser.textContext.length > 7) {
      dataAboutUser.textContext.shift();
      dataAboutUser.textContext.shift();
    }

    // progressively printing out text response
    showResponseText(chatId, progressOutput, userMessage);
  } catch (error) {
    failedRequest(chatId);
    errorData(chatId, dataAboutUser.login, `${String(error)}`, `response`);
  }
}

// image request processing
async function getImage(chatId, userPrompt, userMessage) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  // requesting image generation from HuggingFace API
  try {
    const client = await Client.connect("Serg4451D/FLUX.1-Dev-Serverless-darn-enhanced-prompt");
    const result = await client.predict("/query", {
      prompt: userPrompt,
      is_negative: `(deformed, distorted, disfigured), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, (mutated hands and fingers), disconnected limbs, mutation, mutated, ugly, disgusting, blurry, amputation, misspellings, typos, unrealistic, bad looking, low quality`,
      steps: 35,
      cfg_scale: 7,
      sampler: "DPM++ 2M Karras",
      seed: -1,
      strength: 0.7,
      huggingface_api_key: "",
      use_dev: false,
      enhance_prompt_style: "",
      enhance_prompt_option: false,
      nemo_enhance_prompt_style: "",
      use_mistral_nemo: false,
    });

    bot.sendChatAction(chatId, "upload_photo");

    bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

    await bot.sendPhoto(chatId, result.data[0].url, {
      reply_to_message_id: userMessage,
    });

    // saving chat history to context
    if (result.data[0] && dataAboutUser.textContext) {
      dataAboutUser.textContext.push(userPrompt);
      dataAboutUser.textContext.push(`Created image by user prompt: ${userPrompt}`);
    }

    if (dataAboutUser.textContext && dataAboutUser.textContext.length > 7) {
      dataAboutUser.textContext.shift();
      dataAboutUser.textContext.shift();
    }
  } catch (error) {
    failedRequest(chatId);
    errorData(chatId, dataAboutUser.login, `${String(error)}`, `image`);
  }
}

// video request processing
async function getVideo(chatId, userPrompt, userMessage) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  // requesting video generation from HuggingFace API
  try {
    const client = await Client.connect("TIGER-Lab/T2V-Turbo-V2");
    const result = await client.predict("/predict", {
      prompt: userPrompt,
      guidance_scale: 7.5,
      percentage: 0.5,
      num_inference_steps: 16,
      num_frames: 16,
      seed: 1968164510,
      randomize_seed: true,
      param_dtype: "bf16",
    });

    bot.sendChatAction(chatId, "upload_video");

    bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

    await bot.sendVideo(chatId, result.data[0].video.url, {
      reply_to_message_id: userMessage,
    });

    // saving chat history to context
    if (result.data[0] && dataAboutUser.textContext) {
      dataAboutUser.textContext.push(userPrompt);
      dataAboutUser.textContext.push(`Created video by user request: ${userPrompt}`);
    }

    if (dataAboutUser.textContext && dataAboutUser.textContext.length > 7) {
      dataAboutUser.textContext.shift();
      dataAboutUser.textContext.shift();
    }
  } catch (error) {
    serverOverload(chatId);
    errorData(chatId, dataAboutUser.login, `${String(error)}`, `video`);
  }
}

// request processing message
async function processingRequest(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot
      .sendMessage(chatId, `–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...`, {
        parse_mode: `HTML`,
        disable_web_page_preview: true,
      })
      .then((message) => {
        dataAboutUser.requestMessageId = message.message_id;
      });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

// request error message
async function failedRequest(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

  try {
    await bot.sendMessage(chatId, `–í–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ‚ùå<blockquote><b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b></blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

// server overload message (video)
async function serverOverload(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.deleteMessage(chatId, dataAboutUser.requestMessageId);

  try {
    await bot.sendMessage(chatId, `–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω ‚ùå<blockquote><b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b></blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

// text context reset + message
async function resetTextChat(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.sendMessage(chatId, `–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω ‚úÖ<blockquote><b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ.</b></blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
    });

    dataAboutUser.textContext = [];
    dataAboutUser.userAction = "regular";
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

// processing and reformatting user request
async function changeMode(chatId, userPrompt, userMessage) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  // requesting text generation from HuggingFace API
  try {
    const client = await Client.connect("Qwen/Qwen2.5");
    const result = await client.predict("/model_chat_1", {
      query: `${dataAboutUser.textContext ? `Our chat history: ${dataAboutUser.textContext}\n\nMy new request: ` : ``}${userPrompt}`,
      history: [],
      system: `You have to respond to user requests based on their type and chat history. Never create explicit content. Follow these rules strictly:
      1. For standard information requests or tasks (e.g., 'solve,' 'who is'), respond with only one word and nothing else: 'text'.
      2. For image generation requests (e.g., 'draw,' 'create an image of', 'now add'), respond with 'image' and what user wants to get as a result (divide with '@').
      3. For video generation requests (e.g., 'video with,' 'create a video', 'change'), respond with 'video' and what user wants to get as a result in english translated (divide with '@').
      4. If the request doesn't fit any of these categories or seems nonsensical, respond with: text.`,
      radio: `72B`,
    });

    let promptDecision = result.data[1][0][1].text.split("@");

    // user request recognition (text, image, video)
    if (promptDecision[0] == `text`) {
      bot.sendChatAction(chatId, "typing");
      getResponse(chatId, userPrompt, userMessage);
    } else if (promptDecision[0] == `image`) {
      bot.sendChatAction(chatId, "upload_photo");
      getImage(chatId, promptDecision[1], userMessage);
    } else if (promptDecision[0] == `video`) {
      bot.sendChatAction(chatId, "record_video");
      getVideo(chatId, promptDecision[1], userMessage);
    }
  } catch (error) {
    failedRequest(chatId);
    errorData(chatId, dataAboutUser.login, `${String(error)}`, `response`);
  }
}

// admin bot control
async function adminControl(startNextSend = `start`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == FedotID);

  switch (startNextSend) {
    case `start`:
      await bot.editMessageText(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è..`, {
        parse_mode: `HTML`,
        chat_id: FedotID,
        message_id: dataAboutUser.profileMessageId,
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [[{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `profile` }]],
        },
      });
      break;
    case `next`:
      await bot.editMessageText(dataAboutUser.userAction, {
        parse_mode: `HTML`,
        chat_id: FedotID,
        message_id: dataAboutUser.profileMessageId,
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [
            [
              { text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `adminStart` },
              { text: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ`, callback_data: `adminSend` },
            ],
          ],
        },
      });
      break;
    case `send`:
      for (let i = 0; i < usersData.length; i++) {
        try {
          await bot.sendMessage(usersData[i].chatId, dataAboutUser.userAction, {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          });
        } catch (error) {
          errorData(usersData[i].chatId, usersData[i].login, `${String(error)}`);
          continue;
        }
      }

      await bot.editMessageText(`–û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ<blockquote><b>Different Animal. The Same Beast.</b></blockquote>`, {
        parse_mode: `HTML`,
        chat_id: FedotID,
        message_id: dataAboutUser.profileMessageId,
        disable_web_page_preview: true,
      });
      dataAboutUser.userAction = `regular`;
      break;
  }
}

// master function
async function StartAll() {
  // getting data from DB.json
  if (fs.readFileSync("DB.json") != "[]" && fs.readFileSync("DB.json") != "") {
    let dataFromDB = JSON.parse(fs.readFileSync("DB.json"));
    usersData = dataFromDB.usersData || null;
  }

  // user message recognition
  bot.on(`text`, async (message) => {
    let chatId = message.chat.id;
    let text = message.text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
    let userMessage = message.message_id;

    // adding variables for new users
    try {
      if (!usersData.find((obj) => obj.chatId == chatId)) {
        usersData.push({
          chatId: chatId,
          login: message.from.first_name,
          profileMessageId: null,
          requestMessageId: null,
          responseMessageId: null,
          textContext: [],
          userAction: `regular`,
          userInfoText: ``,
          answerTypeText: ``,
        });
      }

      const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

      switch (text) {
        case `/start`:
          intro(chatId);
          break;
        case `/reset`:
          resetTextChat(chatId);
          break;
        case `/profile`:
          dataAboutUser.userAction = `regular`;
          profile(chatId, `send`);
          break;
        case `/start userInfo`:
          bot.deleteMessage(chatId, userMessage);
          dataAboutUser.userAction = `userInfoInput`;
          profile(chatId, `userInfo`);
          break;
        case `/start answerType`:
          bot.deleteMessage(chatId, userMessage);
          dataAboutUser.userAction = `answerTypeInput`;
          profile(chatId, `answerType`);
          break;
      }

      // answering to request and saving user instructions
      if (text && Array.from(text)[0] != "/") {
        switch (dataAboutUser.userAction) {
          case `regular`:
            processingRequest(chatId);
            changeMode(chatId, text, userMessage);
            break;
          case `userInfoInput`:
            bot.deleteMessage(chatId, userMessage);
            dataAboutUser.userInfoText = `${text.length <= 750 ? text : text.slice(0, 750)}`;
            profile(chatId, `userInfo`);
            break;
          case `answerTypeInput`:
            bot.deleteMessage(chatId, userMessage);
            dataAboutUser.answerTypeText = `${text.length <= 750 ? text : text.slice(0, 750)}`;
            profile(chatId, `answerType`);
            break;
          case `adminInput`:
            bot.deleteMessage(chatId, userMessage);
            dataAboutUser.userAction = message.text;
            adminControl(`next`);
            break;
        }
      }

      // Surround Watcher (text)
      textData(chatId, dataAboutUser.login, text);
    } catch (error) {
      errorData(chatId, message.from.first_name, `${String(error)}`);
    }
  });

  // pressed button recognition
  bot.on(`callback_query`, async (query) => {
    let chatId = query.message.chat.id;
    let data = query.data;

    const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

    try {
      switch (data) {
        case `profile`:
          dataAboutUser.userAction = `regular`;
          profile(chatId);
          break;
        case `digfusion`:
          digfusion(chatId);
          break;
        case `about`:
          about(chatId);
          break;
        case `adminStart`:
          dataAboutUser.userAction = `adminInput`;
          adminControl(`start`);
          break;
        case `adminBack`:
          adminControl(`start`);
          break;
        case `adminSend`:
          adminControl(`send`);
          break;
        case `userInfoDelete`:
          dataAboutUser.userInfoText = ``;
          profile(chatId, `userInfo`);
          break;
        case `answerTypeDelete`:
          dataAboutUser.answerTypeText = ``;
          profile(chatId, `answerType`);
          break;
      }

      // Surround Watcher (button)
      buttonData(chatId, dataAboutUser.login, data);
    } catch (error) {
      errorData(chatId, dataAboutUser.login, `${String(error)}`);
    }
  });

  // photo recognition
  bot.on(`photo`, async (photo) => {
    let chatId = photo.chat.id;
    let photoId = photo.photo[2].file_id;
    let photoCaption = photo.caption;

    const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

    try {
      // Surround Watcher (photo)
      textData(chatId, dataAboutUser.login, photoCaption);
    } catch (error) {
      errorData(chatId, dataAboutUser.login, `${String(error)}`);
    }
  });

  // backup DB.json
  cron.schedule(`0 */10 * * *`, function () {
    try {
      // Surround Watcher (backup)
      databaseBackup(usersData);
    } catch (error) {}
  });

  // saving DB.json
  cron.schedule(`*/30 * * * *`, function () {
    try {
      fs.writeFileSync("DB.json", JSON.stringify({ usersData }, null, 2));
    } catch (error) {}
  });
}

StartAll();
