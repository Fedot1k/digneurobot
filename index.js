import TelegramBot from "node-telegram-bot-api";
import { Client } from "@gradio/client";

import { TelegramToken } from "./config.js";
import { textData, buttonData, errorData } from "./watcher.js";

const bot = new TelegramBot(TelegramToken, { polling: true });
const FedotID = 870204479;
const DavidID = 923690530;

let usersData = [];

let aboutText = `<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–æ–∫?</b>\n<blockquote><b>–ë–æ—Ç</b>, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π <b>digfusion</b> —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <b>Hugging Face API</b>.</blockquote>\n\n<b>–ú–æ–¥–µ–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:</b>\n<blockquote><b>‚Ä¢ OpenGPT 4o</b> - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n<b>‚Ä¢ OpenGPT 4o</b> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n<b>‚Ä¢ Instant Video</b> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ</blockquote>\n\n<b>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:</b>\n<blockquote><b>–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ digfusion - –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å.</b>\n\n–ú—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ –∏ –Ω–µ –ª–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.</blockquote>`;

bot.setMyCommands([
  { command: "/start", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫" },
  { command: "/reset", description: "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" },
  { command: "/mode", description: "–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏" },
  { command: "/profile", description: "–ü—Ä–æ—Ñ–∏–ª—å" },
  { command: "/about", description: "–û –±–æ—Ç–µ" },
]);

async function intro(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.sendMessage(chatId, `–î–æ–±—Äo –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ù–µ–π—Ä–æ—Å–µ—Ç–∏–≤–∏—á–æ–∫</b>. –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç–µ.\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n<blockquote>/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/reset - –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n/mode - –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n/profile - –ü—Ä–æ—Ñ–∏–ª—å\n/about - –û –±–æ—Ç–µ</blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });
    dataAboutUser.userAction = `response`;
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function profile(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.sendMessage(chatId, `üë§ <b><i>–ü—Ä–æ—Ñ–∏–ª—å</i> ‚Ä¢ </b><code>${dataAboutUser.chatId}</code>\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:</b><blockquote>–¢–µ–∫—Å—Ç: <b>${dataAboutUser.statistic.response} —à—Ç</b>\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <b>${dataAboutUser.statistic.image} —à—Ç</b>\n–í–∏–¥–µ–æ: <b>${dataAboutUser.statistic.video} —à—Ç</b></blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠`,
              url: `https://t.me/digfusionsupport`,
            },
          ],
        ],
      },
    });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function about(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot
      .sendMessage(chatId, aboutText, {
        parse_mode: `HTML`,
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [[{ text: `digfusion ‚ùî`, callback_data: `digfusion` }]],
        },
      })
      .then((message) => {
        dataAboutUser.messageId = message.message_id;
      });
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function digfusion(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b><i>‚ùîdigfusion ‚Ä¢ –û –Ω–∞—Å</i></b><blockquote>–ö–æ–º–ø–∞–Ω–∏—è <b><i>digfusion</i></b> - <b>–Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å—Ç–∞—Ä—Ç–∞–ø,</b> —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π <b>—Å–≤–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b> –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Å–ª—É–≥–∏ –ø–æ <b>—Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤</b> —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤!\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ <b>–Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b> –∏ <b>–ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏</b> –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º <b>Telegram –∫–∞–Ω–∞–ª–µ</b> –∏ <b>–±–æ—Ç–µ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ!</b></blockquote>\n\n<b><a href="https://t.me/digfusion">digfusion | –∏–Ω—Ñ–æ</a> ‚Ä¢ <a href="https://t.me/digfusionbot">digfusion | —É—Å–ª—É–≥–∏</a></b>`, {
      parse_mode: "html",
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "about" },
            {
              text: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠",
              url: "https://t.me/digfusionsupport",
            },
          ],
        ],
      },
    });
  } catch (error) {
    errorData(chatId, `dataAboutUser.login`, `${String(error)}`);
  }
}

async function getResponse(chatId, userPrompt) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.sendChatAction(chatId, "typing");

  try {
    const client = await Client.connect("orionai/llama-3.1-70b-demo");
    const result = await client.predict("/predict", {
      user_message: `${dataAboutUser.lastTextResponse != `` ? `Your previous answer: ${dataAboutUser.lastTextResponse} My new question: ${userPrompt} (dont use * in answer except in math)` : `${userPrompt} (dont use * in answer except in math)`}`,
    });

    bot.sendChatAction(chatId, "typing");

    await bot.sendMessage(chatId, `${result.data}`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });

    dataAboutUser.lastTextResponse = result.data;
  } catch (error) {
    console.log(error);
  }
}

async function getImage(chatId, userPrompt) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.sendChatAction(chatId, "upload_photo");

  try {
    bot.sendChatAction(chatId, "upload_photo");

    console.log(result.data);

    await bot.sendPhoto(chatId, `https://prodia-fast-stable-diffusion.hf.space/file=/tmp/gradio/2c8a18f5674822a3bde832208568eb09a4bde3a0/f3ed2edc-c5a2-461c-b1ad-87283284acc7.png`);
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function getVideo(chatId, userPrompt) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  bot.sendChatAction(chatId, "record_video");

  try {
    const space = await Client.connect("KingNish/Instant-Video");
    const result = await space.predict("/instant_video", {
      prompt: userPrompt,
    });

    bot.sendChatAction(chatId, "upload_video");

    await bot.sendVideo(chatId, result.data[0].video.url);
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function resetTextChat(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    dataAboutUser.lastTextResponse = ``;

    await bot.sendMessage(chatId, `–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω ‚úÖ<blockquote><b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ.</b></blockquote>`, {
      parse_mode: `HTML`,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[]],
      },
    });

    dataAboutUser.userAction = `response`;
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function changeMode(chatId, mode = `changeTo`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (mode) {
      case `changeTo`:
        await bot
          .sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚úÖ<blockquote><b></b></blockquote>`, {
            parse_mode: `HTML`,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `–¢–µ–∫—Å—Ç`, callback_data: `changeModeResponse` },
                  { text: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`, callback_data: `changeModeImage` },
                  { text: `–í–∏–¥–µ–æ`, callback_data: `changeModeVideo` },
                ],
              ],
            },
          })
          .then((message) => {
            dataAboutUser.messageId = message.message_id;
          });
        break;
      case `changeModeResponse`:
        await bot.editMessageText(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ‚úÖ`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[]],
          },
        });
        dataAboutUser.userAction = `response`;
        break;
      case `changeModeImage`:
        await bot.editMessageText(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚úÖ`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[]],
          },
        });
        dataAboutUser.userAction = `image`;
        break;
      case `changeModeVideo`:
        await bot.editMessageText(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ‚úÖ`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[]],
          },
        });
        dataAboutUser.userAction = `video`;
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function StartAll() {
  bot.on(`text`, async (message) => {
    if (FedotID == message.chat.id || DavidID == message.chat.id) {
      let text = message.text;
      let chatId = message.chat.id;
      let userMessage = message.message_id;

      try {
        if (!usersData.find((obj) => obj.chatId == chatId)) {
          usersData.push({
            chatId: chatId,
            login: message.from.first_name,
            messageId: null,
            userAction: `response`,
            lastTextResponse: ``,

            statistic: { response: 0, image: 0, video: 0 },
          });
        }

        const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

        switch (text) {
          case `/start`:
            intro(chatId);
            break;
          case `/reset`:
            resetTextChat(chatId);
            break;
          case `/mode`:
            changeMode(chatId);
            break;
          case `/profile`:
            profile(chatId);
            break;
          case `/about`:
            about(chatId, `send`);
            break;
        }
        if (Array.from(text)[0] != "/") {
          switch (dataAboutUser.userAction) {
            case `response`:
              dataAboutUser.statistic.response++;
              getResponse(chatId, text);
              break;
            case `image`:
              dataAboutUser.statistic.image++;
              getImage(chatId, text);
              break;
            case `video`:
              dataAboutUser.statistic.video++;
              getVideo(chatId, text);
              break;
          }
        }

        textData(chatId, dataAboutUser.login, text);
      } catch (error) {
        errorData(chatId, dataAboutUser.login, `${String(error)}`);
      }
    }
  });

  bot.on(`callback_query`, async (query) => {
    let chatId = query.message.chat.id;
    let data = query.data;

    const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

    try {
      switch (data) {
        case `changeModeResponse`:
          changeMode(chatId, data);
          break;
        case `changeModeImage`:
          changeMode(chatId, data);
          break;
        case `changeModeVideo`:
          changeMode(chatId, data);
          break;
        case `digfusion`:
          digfusion(chatId);
          break;
        case `about`:
          bot.deleteMessage(chatId, dataAboutUser.messageId);
          about(chatId);
          break;
      }

      buttonData(chatId, dataAboutUser.login, data);
    } catch (error) {
      errorData(chatId, `dataAboutUser.login`, `${String(error)}`);
    }
  });
}

StartAll();
